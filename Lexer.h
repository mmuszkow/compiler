/* autogenerated by lexer.py */
#ifndef __LEXER_H__
#define __LEXER_H__

#include <stdio.h>
#include <cstdlib>
#include <vector>
#include <string>
#include <sstream>

#include "StringsTable.h" /* strings table */

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;

/* token type */
enum TokenType {
    UNK,IF,ELSE,EQ,NEQ,GTEQ,LTEQ,GT,LT,LAND,LOR,LNOT,ASSIGN,LPARENTH,RPARENTH,
    LBRACE,RBRACE,LBRACKET,RBRACKET,SCOLON,ADD,SUB,MUL,DIV,REMINDER,BOOL_CONST,
    INT_CONST,STR_CONST,ID,TYPE,WHILE,FOR,RETURN,CASE,SWITCH,DEFAULT,BREAK,
    CONTINUE,COMMA,DOT,INC,DEC,BNOT,BAND,BOR,SHL,SHR,BXOR,SEL,COLON,CLASS,DEF,
    CALL,THIS,ASM,NEW,CAST
};

/* single token */
struct Token {
    static StringsTable st;

    TokenType type;
    union {
        int integer;
        bool boolean;
        int strIndex;
    };
    int lineNo;

    Token() {}
    Token(TokenType _type, int line) : type(_type), lineNo(line), strIndex(0) {}
    Token(TokenType _type, int line, const std::string& text) : type(_type), lineNo(line), strIndex(st.add(text)) {}
    Token(TokenType _type, int line, bool trueFalse) : type(_type), lineNo(line), boolean(trueFalse) {}
    Token(TokenType _type, int line, int i) : type(_type), lineNo(line), integer(i) {}

    const std::string& strVal() const {
        return st.get(strIndex);
    }

    static const char* typeToString(TokenType type) {
        switch(type) {
            case UNK: return "UNK";
            case IF: return "IF";
            case ELSE: return "ELSE";
            case EQ: return "EQ";
            case NEQ: return "NEQ";
            case GTEQ: return "GTEQ";
            case LTEQ: return "LTEQ";
            case GT: return "GT";
            case LT: return "LT";
            case LAND: return "LAND";
            case LOR: return "LOR";
            case LNOT: return "LNOT";
            case ASSIGN: return "ASSIGN";
            case LPARENTH: return "LPARENTH";
            case RPARENTH: return "RPARENTH";
            case LBRACE: return "LBRACE";
            case RBRACE: return "RBRACE";
            case LBRACKET: return "LBRACKET";
            case RBRACKET: return "RBRACKET";
            case SCOLON: return "SCOLON";
            case ADD: return "ADD";
            case SUB: return "SUB";
            case MUL: return "MUL";
            case DIV: return "DIV";
            case REMINDER: return "REMINDER";
            case BOOL_CONST: return "BOOL_CONST";
            case INT_CONST: return "INT_CONST";
            case STR_CONST: return "STR_CONST";
            case ID: return "ID";
            case TYPE: return "TYPE";
            case WHILE: return "WHILE";
            case FOR: return "FOR";
            case RETURN: return "RETURN";
            case CASE: return "CASE";
            case SWITCH: return "SWITCH";
            case DEFAULT: return "DEFAULT";
            case BREAK: return "BREAK";
            case CONTINUE: return "CONTINUE";
            case COMMA: return "COMMA";
            case DOT: return "DOT";
            case INC: return "INC";
            case DEC: return "DEC";
            case BNOT: return "BNOT";
            case BAND: return "BAND";
            case BOR: return "BOR";
            case SHL: return "SHL";
            case SHR: return "SHR";
            case BXOR: return "BXOR";
            case SEL: return "SEL";
            case COLON: return "COLON";
            case CLASS: return "CLASS";
            case DEF: return "DEF";
            case CALL: return "CALL";
            case THIS: return "THIS";
            case ASM: return "ASM";
            case NEW: return "NEW";
            case CAST: return "CAST";
            default: return "UNK";
        }
    }
    
    const char* toString() const {
        return typeToString(type);
    }
};

StringsTable Token::st;

#define LEXER_ERR(msg, ...) fprintf(stderr, "[Lexer] at line %d: " msg "\n", curr_line_no, __VA_ARGS__)

/* lexer itself */
class Lexer {
protected:
    enum State {INITIAL,STRING,COMMENT};
    std::string str;
    int   begin, end; /* internal: begin & end of the current match */
    int   curr_line_no; /* currently analyzed line, for error reporting */
    State lexer_state; /* lexer internal state */
    int   dfa_state; /* DFA automaton state for current lexer state */
    
    /* transition tables */
    static const uint8_t INITIAL_CHAR_MAP[256];
    static const uint8_t INITIAL_FINAL[120];
    static const uint8_t INITIAL_TRANSITIONS[120][49];
    static const uint8_t STRING_CHAR_MAP[256];
    static const uint8_t STRING_FINAL[7];
    static const uint8_t STRING_TRANSITIONS[7][5];
    static const uint8_t COMMENT_CHAR_MAP[256];
    static const uint8_t COMMENT_FINAL[6];
    static const uint8_t COMMENT_TRANSITIONS[6][4];

public:
    std::vector<Token> tokens;
    Lexer() : begin(0), end(0), curr_line_no(1), dfa_state(0) { }
    
protected:
    void addToken(TokenType type) {
        tokens.push_back(Token(type, curr_line_no));
    }
    
    void addTokenWithMatch(TokenType type) {
        tokens.push_back(Token(type, curr_line_no, str.substr(begin, end-begin)));
    }

    void addStrConst(const std::string& str) {
        tokens.push_back(Token(STR_CONST, curr_line_no, str));
    }
   
    void addIntConst() {
        std::string intVal = str.substr(begin, end-begin);
        /* TODO: range check */
        int radix = 1;
        Token t(INT_CONST, curr_line_no);        
        for(int i=intVal.size()-1; i>=0; i--) {
            if(intVal[i] == '-')
                t.integer = -t.integer;
            else {
                t.integer += radix * (intVal[i]-'0');
                radix *= 10;
            }
        }
        tokens.push_back(t);
    }
    
    int move(char c) {
        switch(lexer_state) {
            case INITIAL: return INITIAL_TRANSITIONS[dfa_state][INITIAL_CHAR_MAP[c]];
            case STRING: return STRING_TRANSITIONS[dfa_state][STRING_CHAR_MAP[c]];
            case COMMENT: return COMMENT_TRANSITIONS[dfa_state][COMMENT_CHAR_MAP[c]];
            default: LEXER_ERR("invalid lexer state"); return -1;
        }
    }

    void changeState(State state) {
        lexer_state = state;
        dfa_state = 0;
    }

public:
    /* main lexing function */
    bool lex(const std::string& _str) {
        std::ostringstream str_const;
        str = _str;
        begin = 0;
        lexer_state = INITIAL;
        dfa_state = 0;
        const uint8_t* final_state = NULL;
        while(begin < str.size()) {
            /* choose proper final transitions table */        
            switch(lexer_state) {
                case INITIAL: final_state = INITIAL_FINAL; break;
                case STRING: final_state = STRING_FINAL; break;
                case COMMENT: final_state = COMMENT_FINAL; break;
                default: LEXER_ERR("invalid lexer state"); return false;
            }
            
            dfa_state = move(str[begin]);
            if(final_state[dfa_state]) {
                end = begin;
                int action = dfa_state;
                /* longest match */            
                while(final_state[dfa_state] && end < str.size()) {
                    end++;
                    action = dfa_state;
                    if(end == str.size()) { end++; break; }
                    dfa_state = move(str[end]);
                }
                
                switch(lexer_state) {
                    case INITIAL:
                        switch(action) {
                            case 0: { addIntConst(); break; }
                            case 1: { LEXER_ERR("unexpected character"); return false; break; }
                            case 2: { /* whitespace */ break; }
                            case 3: { curr_line_no++; break; }
                            case 4: { addToken(LNOT); break; }
                            case 5: { str_const.str(""); str_const.clear(); changeState(STRING); break; }
                            case 6: { addToken(REMINDER); break; }
                            case 7: { addToken(BAND); break; }
                            case 8: { addToken(LPARENTH); break; }
                            case 9: { addToken(RPARENTH); break; }
                            case 10: { addToken(MUL); break; }
                            case 11: { addToken(ADD); break; }
                            case 12: { addToken(COMMA); break; }
                            case 13: { addToken(SUB); break; }
                            case 14: { addToken(DOT); break; }
                            case 15: { addToken(DIV); break; }
                            case 16: { addIntConst(); break; }
                            case 17: { addToken(COLON); break; }
                            case 18: { addToken(SCOLON); break; }
                            case 19: { addToken(LT); break; }
                            case 20: { addToken(ASSIGN); break; }
                            case 21: { addToken(GT); break; }
                            case 22: { addTokenWithMatch(TYPE); break; }
                            case 23: { addToken(LBRACKET); break; }
                            case 24: { addToken(RBRACKET); break; }
                            case 25: { addToken(BXOR); break; }
                            case 26: { addTokenWithMatch(ID); break; }
                            case 27: { addTokenWithMatch(ID); break; }
                            case 28: { addTokenWithMatch(ID); break; }
                            case 29: { addTokenWithMatch(ID); break; }
                            case 30: { addTokenWithMatch(ID); break; }
                            case 31: { addTokenWithMatch(ID); break; }
                            case 32: { addTokenWithMatch(ID); break; }
                            case 33: { addTokenWithMatch(ID); break; }
                            case 34: { addTokenWithMatch(ID); break; }
                            case 35: { addTokenWithMatch(ID); break; }
                            case 36: { addTokenWithMatch(ID); break; }
                            case 37: { addTokenWithMatch(ID); break; }
                            case 38: { addTokenWithMatch(ID); break; }
                            case 39: { addTokenWithMatch(ID); break; }
                            case 40: { addToken(LBRACE); break; }
                            case 41: { addToken(BOR); break; }
                            case 42: { addToken(RBRACE); break; }
                            case 43: { addToken(BNOT); break; }
                            case 45: { addToken(NEQ); break; }
                            case 46: { addToken(LAND); break; }
                            case 47: { addToken(INC); break; }
                            case 48: { addToken(DEC); break; }
                            case 49: { addIntConst(); break; }
                            case 50: { addToken(SEL); break; }
                            case 51: { changeState(COMMENT); break; }
                            case 52: { /* comment */ break; }
                            case 53: { addToken(SHL); break; }
                            case 54: { addToken(LTEQ); break; }
                            case 55: { addToken(EQ); break; }
                            case 56: { addToken(GTEQ); break; }
                            case 57: { addToken(SHR); break; }
                            case 58: { addTokenWithMatch(ID); break; }
                            case 59: { addTokenWithMatch(ID); break; }
                            case 60: { addTokenWithMatch(ID); break; }
                            case 61: { addTokenWithMatch(ID); break; }
                            case 62: { addTokenWithMatch(ID); break; }
                            case 63: { addTokenWithMatch(ID); break; }
                            case 64: { addTokenWithMatch(ID); break; }
                            case 65: { addTokenWithMatch(ID); break; }
                            case 66: { addTokenWithMatch(ID); break; }
                            case 67: { addToken(IF); break; }
                            case 68: { addTokenWithMatch(ID); break; }
                            case 69: { addTokenWithMatch(ID); break; }
                            case 70: { addTokenWithMatch(ID); break; }
                            case 71: { addTokenWithMatch(ID); break; }
                            case 72: { addTokenWithMatch(ID); break; }
                            case 73: { addTokenWithMatch(ID); break; }
                            case 74: { addToken(LOR); break; }
                            case 75: { addToken(ASM); break; }
                            case 76: { addTokenWithMatch(ID); break; }
                            case 77: { addTokenWithMatch(ID); break; }
                            case 78: { addTokenWithMatch(ID); break; }
                            case 79: { addTokenWithMatch(ID); break; }
                            case 80: { addTokenWithMatch(ID); break; }
                            case 81: { addToken(DEF); break; }
                            case 82: { addTokenWithMatch(ID); break; }
                            case 83: { addTokenWithMatch(ID); break; }
                            case 84: { addToken(FOR); break; }
                            case 85: { addToken(NEW); break; }
                            case 86: { addTokenWithMatch(ID); break; }
                            case 87: { addTokenWithMatch(ID); break; }
                            case 88: { addTokenWithMatch(ID); break; }
                            case 89: { addTokenWithMatch(ID); break; }
                            case 90: { addTokenWithMatch(ID); break; }
                            case 91: { addTokenWithMatch(ID); break; }
                            case 92: { addToken(CALL); break; }
                            case 93: { addToken(CASE); break; }
                            case 94: { addToken(CAST); break; }
                            case 95: { addTokenWithMatch(ID); break; }
                            case 96: { addTokenWithMatch(ID); break; }
                            case 97: { addTokenWithMatch(ID); break; }
                            case 98: { addToken(ELSE); break; }
                            case 99: { addTokenWithMatch(ID); break; }
                            case 100: { addTokenWithMatch(ID); break; }
                            case 101: { addTokenWithMatch(ID); break; }
                            case 102: { addToken(THIS); break; }
                            case 103: { Token t(BOOL_CONST, curr_line_no); t.boolean = true; tokens.push_back(t); break; }
                            case 104: { addTokenWithMatch(ID); break; }
                            case 105: { addToken(BREAK); break; }
                            case 106: { addToken(CLASS); break; }
                            case 107: { addTokenWithMatch(ID); break; }
                            case 108: { addTokenWithMatch(ID); break; }
                            case 109: { Token t(BOOL_CONST, curr_line_no); t.boolean = false; tokens.push_back(t); break; }
                            case 110: { addTokenWithMatch(ID); break; }
                            case 111: { addTokenWithMatch(ID); break; }
                            case 112: { addToken(WHILE); break; }
                            case 113: { addTokenWithMatch(ID); break; }
                            case 114: { addTokenWithMatch(ID); break; }
                            case 115: { addToken(RETURN); break; }
                            case 116: { addToken(SWITCH); break; }
                            case 117: { addTokenWithMatch(ID); break; }
                            case 118: { addToken(DEFAULT); break; }
                            case 119: { addToken(CONTINUE); break; }
                            default: LEXER_ERR("invalid DFA action"); return false;
                        }
                        break;
                    case STRING:
                        switch(action) {
                            case 0: { str_const << str[begin]; break; }
                            case 1: { str_const << str[begin]; break; }
                            case 2: { str_const << '\t'; break; }
                            case 3: { str_const << '\n'; break; }
                            case 4: { addStrConst(str_const.str()); changeState(INITIAL); break; }
                            case 5: { str_const << '\\'; break; }
                            default: LEXER_ERR("invalid DFA action"); return false;
                        }
                        break;
                    case COMMENT:
                        switch(action) {
                            case 0: { /* comment */ break; }
                            case 1: { /* comment */ break; }
                            case 2: { curr_line_no++; break; }
                            case 3: { /* comment */ break; }
                            case 5: { changeState(INITIAL); break; }
                            default: LEXER_ERR("invalid DFA action"); return false;
                        }
                        break;

                    default: LEXER_ERR("invalid lexer state"); return false;
                }
                begin = end;
                dfa_state = 0;
            } else
                begin++;
        }
        
        /* if we are not in the start state at the end, 
         * that means that we are still parsing some token 
         */
        if(dfa_state) {
            LEXER_ERR("syntax error");
            return false;
        }
        
        return true;
    }
};

/* translation tables */
const uint8_t Lexer::INITIAL_CHAR_MAP[256] = {
    0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,0,0,5,6,0,7,8,9,10,11,12,13,14,15,15,15,15,15,15,15,15,15,15,16,17,18,19,20,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,0,23,24,25,0,26,27,28,29,30,31,32,33,34,32,35,36,37,38,39,32,32,40,41,42,43,32,44,32,32,32,45,46,47,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

const uint8_t Lexer::INITIAL_FINAL[120] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};

const uint8_t Lexer::INITIAL_TRANSITIONS[120][49] = {
    {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,33,33,33,35,33,36,37,38,33,39,40,41,42,43},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,2,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,46,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,47,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,48,44,44,49,44,44,44,44,50,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,51,44,44,44,44,52,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,16,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,53,54,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,55,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,56,57,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,22,44,44,44,44,44,22,44,44,44,44,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,26,44,44,44,44,44,44,44,44,44,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,58,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,59,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,60,33,33,33,33,33,33,33,33,33,61,33,33,62,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,63,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,64,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,65,33,33,33,33,33,33,33,33,33,33,33,33,66,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,67,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,68,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,69,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,70,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,71,33,33,33,33,33,33,72,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,73,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,74,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,49,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {52,52,44,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,75,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,76,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,77,33,33,33,33,78,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,79,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,80,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,81,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,82,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,83,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,84,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,85,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,86,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,87,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,88,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,89,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,90,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,91,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,92,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,93,33,33,33,33,33,33,33,33,33,33,33,94,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,95,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,96,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,97,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,98,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,99,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,100,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,101,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,102,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,103,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,104,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,105,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,106,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,107,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,108,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,109,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,110,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,111,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,112,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,113,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,114,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,115,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,116,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,117,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,118,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,119,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44},
    {44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,33,44,44,44,44,44,22,44,44,44,26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,44,44,44,44}
};

const uint8_t Lexer::STRING_CHAR_MAP[256] = {
    0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

const uint8_t Lexer::STRING_FINAL[7] = {
    1,1,1,1,1,1,0
};

const uint8_t Lexer::STRING_TRANSITIONS[7][5] = {
    {1,2,3,4,5},
    {6,6,6,6,6},
    {6,6,6,6,6},
    {6,6,6,6,6},
    {6,6,6,6,6},
    {6,6,6,6,6},
    {6,6,6,6,6}
};

const uint8_t Lexer::COMMENT_CHAR_MAP[256] = {
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

const uint8_t Lexer::COMMENT_FINAL[6] = {
    1,1,1,1,0,1
};

const uint8_t Lexer::COMMENT_TRANSITIONS[6][4] = {
    {1,2,3,1},
    {4,4,4,4},
    {4,4,4,4},
    {4,4,4,5},
    {4,4,4,4},
    {4,4,4,4}
};


#endif
